package org;

public final class Airplane extends AbstractTransport {
    private final JetEngine[] engines;
    private final int wingspan;
    private final int capacity;
    private final double maxAltitude;
    private final double descentRate;
    private Thread descentThread;
    private boolean isDescending;

    public Airplane(String name, int maxSpeed, JetEngine[] engines, int wingspan, int capacity) {
        super(name, TransportType.AIRPLANE, maxSpeed);
        this.engines = engines;
        this.wingspan = wingspan;
        this.capacity = capacity;
        this.maxAltitude = 12000;
        this.descentRate = 30;
        this.isDescending = false;
    }

    @Override
    public void stopEngine() {
        if (!engineRunning) {
            System.out.println("–î–≤–∏–≥–∞—Ç–µ–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
            return;
        }

        for (JetEngine engine : engines) {
            engine.stop();
        }
        engineRunning = false;
        System.out.println("–î–≤–∏–≥–∞—Ç–µ–ª–∏ —Å–∞–º–æ–ª–µ—Ç–∞ " + name + " –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");

        if (currentAltitude > 0 && !crashed) {
            System.out.println("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–≤–∏–≥–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ!");
            System.out.println("‚ö†Ô∏è  –°–∞–º–æ–ª–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ!");
            System.out.println("‚ö†Ô∏è  –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏!");
            startDescent(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ
        }
    }

    @Override
    public void startEngine() {
        if (crashed) {
            System.out.println("–°–∞–º–æ–ª–µ—Ç —Ä–∞–∑–±–∏—Ç! –î–≤–∏–≥–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è.");
            return;
        }

        stopDescent(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π

        for (JetEngine engine : engines) {
            engine.start();
        }
        engineRunning = true;
        System.out.println("–î–≤–∏–≥–∞—Ç–µ–ª–∏ —Å–∞–º–æ–ª–µ—Ç–∞ " + name + " –∑–∞–ø—É—â–µ–Ω—ã");

        if (currentAltitude > 0) {
            System.out.println("–í—ã—Å–æ—Ç–∞: " + String.format("%.0f", currentAltitude) + " –º");
        }
    }

    public void startDescent() {
        if (currentAltitude <= 0) {
            System.out.println("–°–∞–º–æ–ª–µ—Ç —É–∂–µ –Ω–∞ –∑–µ–º–ª–µ!");
            return;
        }

        if (!engineRunning) {
            System.out.println("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏!");
            return;
        }

        System.out.println("‚úàÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏...");
        System.out.println("‚úàÔ∏è  –¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞: " + String.format("%.0f", currentAltitude) + " –º");

        // –ü–ª–∞–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 20 –º/—Å –ø—Ä–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –¥–≤–∏–≥–∞—Ç–µ–ª—è—Ö
        Thread descentThread = new Thread(() -> {
            try {
                while (currentAltitude > 0 && engineRunning && !crashed) {
                    Thread.sleep(1000);
                    currentAltitude = Math.max(currentAltitude - 20, 0);
                    System.out.printf("‚úàÔ∏è  –°–ù–ò–ñ–ï–ù–ò–ï: %.0f –º%n", currentAltitude);

                    if (currentAltitude <= 500 && currentAltitude > 0) {
                        System.out.println("‚úàÔ∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏!");
                        System.out.println("‚úàÔ∏è  –ú–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–∞–¥–∫—É (–æ–ø—Ü–∏—è 3)");
                    }

                    if (currentAltitude == 0) {
                        System.out.println("‚úàÔ∏è  –°–∞–º–æ–ª–µ—Ç –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è!");
                        break;
                    }
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        });

        descentThread.start();
    }

    private void stopDescent() {
        isDescending = false;
        if (descentThread != null) {
            descentThread.interrupt();
            try {
                descentThread.join();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }

    @Override
    public void move() {
        if (crashed) {
            System.out.println("–°–∞–º–æ–ª–µ—Ç —Ä–∞–∑–±–∏—Ç! –î–≤–∏–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
            return;
        }

        if (!engineRunning) {
            System.out.println("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏!");
            return;
        }

        stopDescent(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è

        if (currentAltitude == 0) {
            System.out.println(name + " –≤–∑–ª–µ—Ç–∞–µ—Ç");
            currentAltitude = 100; // –í–∑–ª–µ—Ç–∞–µ–º –Ω–∞ 100 –º–µ—Ç—Ä–æ–≤
        } else {
            System.out.println(name + " –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–æ–ª–µ—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ " +
                    String.format("%.0f", currentAltitude) + " –º");
        }
    }

    @Override
    public void stop() {
        if (currentAltitude > 0) {
            System.out.println("–°–∞–º–æ–ª–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ!");
            System.out.println("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—Å–∞–¥–∫—É!");
            return;
        }

        // –ï—Å–ª–∏ —Å–∞–º–æ–ª–µ—Ç —É–∂–µ –Ω–∞ –∑–µ–º–ª–µ
        if (!engineRunning) {
            System.out.println("–°–∞–º–æ–ª–µ—Ç " + name + " —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            System.out.println("–î–≤–∏–≥–∞—Ç–µ–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã, —Å–∞–º–æ–ª–µ—Ç –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–Ω");
        } else {
            System.out.println("–°–∞–º–æ–ª–µ—Ç " + name + " –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–µ–º–ª–µ");
            System.out.println("–î–≤–∏–≥–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è —Ä—É–ª–µ–Ω–∏—è");
            System.out.println("–î–ª—è –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ (–æ–ø—Ü–∏—è 4)");
        }
    }

    private void crash() {
        crashed = true;
        engineRunning = false;
        isDescending = false;
        System.out.println("üí•üí•üí• –°–ê–ú–û–õ–ï–¢ –†–ê–ó–ë–ò–õ–°–Ø! üí•üí•üí•");
        System.out.println("üí• " + name + " —É–ø–∞–ª —Å –Ω–µ–±–∞!");
        System.out.println("üí• –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!");
        System.out.println("üí• –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–∞–º–æ–ª–µ—Ç!");
    }

    public boolean canLand() {
        return currentAltitude <= 500 && currentAltitude > 0;
    }

    public void performLanding() {
        if (currentAltitude > 500) {
            System.out.println("‚úàÔ∏è  –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–∞–¥–∫—É!");
            System.out.println("‚úàÔ∏è  –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ! –¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞: " +
                    String.format("%.0f", currentAltitude) + " –º");
            System.out.println("‚úàÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '–ù–∞—á–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ' —Å–Ω–∞—á–∞–ª–∞");
            return;
        }

        if (currentAltitude > 0 && currentAltitude <= 500) {
            stopDescent(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
            System.out.println("‚úàÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–∞–¥–∫—É...");
            // –ü–ª–∞–≤–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞
            while (currentAltitude > 0 && !crashed) {
                try {
                    Thread.sleep(500);
                    currentAltitude = Math.max(currentAltitude - 10, 0);
                    System.out.printf("‚úàÔ∏è  –í—ã—Å–æ—Ç–∞: %.0f –º%n", currentAltitude);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            if (!crashed) {
                System.out.println("‚úàÔ∏è  –ü–æ—Å–∞–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
                System.out.println("–î–≤–∏–≥–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è —Ä—É–ª–µ–Ω–∏—è –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É");
            }
        } else {
            System.out.println("–°–∞–º–æ–ª–µ—Ç —É–∂–µ –Ω–∞ –∑–µ–º–ª–µ");
        }
    }

    @Override
    public String getInfo() {
        String status;
        if (crashed) {
            status = "–†–ê–ó–ë–ò–¢";
        } else if (currentAltitude > 0) {
            status = isDescending ? "–°–ù–ò–ñ–ê–ï–¢–°–Ø" : "–í –ü–û–õ–ï–¢–ï";
        } else {
            status = "–ù–ê –ó–ï–ú–õ–ï";
        }

        return "–°–∞–º–æ–ª–µ—Ç: " + name + "\n" +
                "–¢–∏–ø: " + type + "\n" +
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ: " + status + "\n" +
                "–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å: " + maxSpeed + " –∫–º/—á\n" +
                "–¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞: " + String.format("%.0f", currentAltitude) + " –º\n" +
                "–î–≤–∏–≥–∞—Ç–µ–ª–∏: " + engines.length + " x " + engines[0].getModel() + "\n" +
                "–î–≤–∏–≥–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: " + (engineRunning ? "–î–∞" : "–ù–µ—Ç") + "\n" +
                "–†–∞–∑–º–∞—Ö –∫—Ä—ã–ª—å–µ–≤: " + wingspan + " –º\n" +
                "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " + capacity + " –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤\n" +
                "–ü—Ä–æ–π–¥–µ–Ω–æ: " + String.format("%.1f", distanceTraveled) + " –∫–º";
    }
}